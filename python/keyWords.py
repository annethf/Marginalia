#关键字参数
可变参数允许传入0个或任意个参数，这些可变参数在函数调用时自动组装
为一个tuple。而关键字参数允许传入0个或任意个含参数名的参数，这些关
键字参数在函数内部自动组装为一个dict。
示例：
def person(name, age, **kw):
	print 'name:', name, 'age:', age, 'other:', kw

函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数
时，可以只传入必选参数：

>>>person('Michael', 30)
name: Michael age: 30 other:{}

也可以传入任意个数的关键字参数：
>>>person('Bob', 35, city = 'Beijing')
name: Bob age: 35 other: {'city': 'Beijing'}
>>>person('Adam', 45, gender = 'M', job = 'Engineer')
name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}

关键字参数的作用在于：它可以扩展函数的功能。比如，在person函数里，我
们保证能接收到name和age这两个参数，但是，如果调用者愿意提供更多的参数
我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项
外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。

和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数
传进去：

>>>kw = {'city': 'Beijing', 'job': 'Engineer'}
>>>person('Jack', 24, city = ke['city'], job = kw['job'])
name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}

当然，上面复杂的调用可以用简化的写法：

>>>kw = {'city': 'Beijing', 'job': 'Engineer'}
>>>person('Jack', 24, **kw)
name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}

#参数组合
在python中定义函数，可以用必选参数、默认参数、可变参数和关键字参数，这4
种参数都可以一起使用，或者只用其中某些，但是请注意，参数定义的顺序必须是：
必选参数、默认参数、可变参数和关键参数。
比如定义一个函数，包含上述4种参数：

def func(a, b, c = 0, *args, **kw):
	print 'a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw
	
在函数调用的时候，python解释器自动按照参数位置和参数名把对应的参数传进去。

>>>func(1, 2)
a = 1 b = 2 c = 0 args = () kw = {}
>>>func(1, 2, c = 3)
a = 1 b = 2 c = 3 args = () kw = {}
>>>func(1, 2, 3, 'a', 'b')
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {}
>>>func(1, 2, 3, 'a', 'b', x = 99)
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}

最神奇的是通过一个tuple和dict, 也可以调用该函数：

>>>args = (1, 2, 3, 4)
>>>kw = {'x': 99}
>>>func(*args, **kw)
a = 1 b = 2 c = 3 args = (4,) kw = {'x': 99}

所以，对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的
参数是如何定义的。

python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复
杂的参数。

默认参数一定要用不可变对象，如果是可变对象， 运行会有逻辑错误！

要注意定义可变参数和关键字参数的语法：
*args是可变参数， args接收的是一个tuple;
**kw是关键字参数，kw接收的是一个dict。

以及调用函数时如何传入可变参数和关键字参数的语法：
可变参数既可以直接传入：func(1, 2, 3), 又可以先组装list或tuple, 再通过*args传入:
func(*(1, 2, 3));
关键字参数既可以直接传入：func(a = 1, b = 2)，又可以先组装dict, 再通过**kw传入：
func(**{'a': 1, 'b': 2})

#递归函数
在函数内部，可以调用其他函数。如果一个函数在内部调用自己本身，这个函数就是递归函数。
举个例子，计算阶乘，用函数fact(n)表示，可以看出：
fact(n) = n! = 1 * 2 * 3 * ... * (n - 1) * n = (n - 1) ! * n = fact(n - 1) * n
所以，fact(n)可表示为n * fact(n - 1)，只有n = 1时需要特殊处理。
于是，fact(n)用递归的方式写出来就是：
#计算阶乘，不能就计算0的阶乘
def fact(n):
	if n == 1:
		return 1
	return n * fact(n - 1)
	
上面就是一个递归函数，可以试试：

>>>fact(1)
1
>>>fact(5)
120
...

递归函数的优点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环
的方式，但循环的逻辑不如递归清晰。
使用递归函数需要注意防止栈溢出。 在计算机中，函数调用是通过栈这种数据结构
实现的，每当进入一个函数调用，栈就会加一层帧， 每当函数返回，栈就会减一层帧。
由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。可以试试fact(1000)

>>>fact(1000)
...

解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所以，
把循环看成是一种特殊的尾递归函数也是可以的。

尾递归是指， 在函数返回的时候， 调用自己本身，并且，return语句不能包含表达式。这样，
编译器或者解释器就可以把尾递归做优化，使得递归本身无论调用多少次，都只占用一个栈帧，
不会出现溢出的情况。

上面的fact(n)函数由于renturn n * fact(n - 1)引入了乘法表达式，所以就不是尾递归了。要
改成尾递归方式，需要多一点代码，主要是把每一步的乘积传入到递归函数中：

def fact(n):
	return fact_iter(n, 1)
	
def fact_iter(num, product):
	if num == 1:
		return product
	return fact_iter(num - 1, num * product
	
可以看到，return fact_iter(num - 1, num * product)仅返回递归函数本身，num - 1和
num * product在函数调用前就会被计算，不影响函数调用。

尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。
遗憾的是，大多数编程语言没有针对尾递归做优化，python解释器也没有做优化，所以，即使
把上面的fact(n)函数改成尾递归方式，也会导致栈溢出。

小结：
使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。
针对尾递归优化的语言可以通过尾递归防止栈溢出，尾递归事实上和循环是等价的，没有循环语句
的编程语言只能通过尾递归实现循环。
python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。

#高级特性
掌握了python的数据类型、语句和函数，基本上就可以编写出很多有用的程序了。
比如构造一个1, 3, 5, 7, ..., 99的列表，可以通过循环实现：

L = []
n = 1
while n <= 99:
	L.append(n)
	n = n + 2
	
取list的前一半的元素，也可以通过循环实现。
但在python中，代码不是越多越好，而是越少越好，代码不是越复杂越好，而是越简单越好。
python中非常有用的高级特性，一行代码能实现的功能，决不写5行代码。

#切片
取一个list或tuple的部分元素是非常常见的操作。比如，一个list如下：

>>>L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']

取前三个元素，笨办法：

>>>[L[0], L[1], L[2]]
['Michael', 'Sarah', 'Tracy']

之所以是笨办法是因为扩展一下，取前N个元素就没辙了。

取前N个元素，也就是索引为0 - (N - 1)的元素，可以用循环：

>>>r = []
>>>n = 3
>>>for i in range(n):
		r.append(L[i])
		
>>>r
['Michael', 'Sarah', 'Tracy']

对这种经常取指定索引范围的操作，用循环十分繁琐，因此，python提供了切片(Slice)
操作符，能大大简化这种操作。
对应上面的问题，取前3个元素，用一行代码就可以完成切片：

>>>L[0:3]
['Michael', 'Sarah', 'Tracy']

L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1， 2，正好3个元素。

如果第一个索引是0，还可以省略：

>>>L[:3]
['Michael', 'Sarsh', 'Tracy']

也可以从索引1开始，取出2个元素来：

>>>L[1:3]
['Sarah', 'Tracy']

类似地，既然python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，

>>>L[-2:]
['Bob', 'Jack']
>>>L[-2:-1]
['Bob']

记住倒数第一个元素的索引是-1。

切片操作十分有用。我们先创建一个0-99的数列：

>>>L = range(100)
>>>L
[0, 1, 2, 3, ..., 99]

可以通过切片轻松取出某一段数列。比如前10个数：

>>>L[:10]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

后10个数：

>>>L[-10:]
[90, 91, 92, 93, 94, 95, 96, 97, 97, 99]

前11-20个数：

>>>L[10:20]
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

前10个数，每两个取一个：

>>>L[:10:2]
[0, 2, 4, 6, 8]

所有数，每5个取一个：

>>>L[::5]
[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]

甚至什么都不写，只写L[:]就可以原样复制一个list:

>>>L[:]
[0, 1, 2, 3, ..., 99]

tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是
操作的结果仍是tuple:

>>>(0, 1, 2, 3, 4, 5)[:3]
(0, 1, 2)

字符串'xxx'或unicode字符串u'xxx'也可以看成是一种list，每个元素就是一个字符。因此，
字符串也可以用切片操作，只是操作结果仍是字符串：

在很多编程语言中，针对字符串提供了很多各种截取函数，其实目的就是对字符串切片。
python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。

小结：
有了切片操作，很多地方循环就不再需要了。python的切片非常灵活，一行代码就可以实现
很多行循环才能完成的操作。

#迭代
如果给定一个list或tuple，可以通过for循环来遍历这个list或tuple，这种遍历成为迭代。
在python中，迭代是通过for...in来完成的，而很多语言比如C或者java，迭代list是通过
下标完成的，比如java：

for(i = 0; i < list.length; i++){
	n = list[i];
}

可以看出，python的for循环抽象程度高于java的for循环，因为python的for循环不仅可以用在list
或tuple上，还可以用在其他可迭代对象上。

>>>d = {'a': 1, 'b': 2, 'c': 3}
>>>for key in d:
	print key
	
a
b
c

因为dict的存储不是按照list的方式顺序排列，所以迭代出的结果顺序很可能不一样。
默认情况下，dict迭代的是key。如果要迭代value，可用for value in d.itervalues()，如果要同时迭代
key和value,可以用for k, v in d.iteritems()。
由于字符串也是可迭代对象，因此，也可以作用于for循环：

>>>for ch in 'ABC':
		print ch
		
A
B
C

所以，当使用for循环时，只要作用于一个可迭代对象，for循环就可以正常运行，而不太
关心该对象究竟是list还是其他数据类型。
那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断：

>>>from collections import Iterable
>>>isinstance('abc', Iterable)
True
>>>isinstance([1, 2, 3], Iterable)
True
>>>isinstance(123, Iterable)
False

最后一个小问题，如果要对list实现类似java那样的下标循环怎么办？python内置的
enumerate函数可以把一个list编程索引元素对，这样就可以在for循环中同时迭代索
引和元素本身：

>>>for i, value in enumerate(['A', 'B', 'C']):
		print i, value

0 A
1 B
2 C

上面的for循环里，同时引入了两个变量，在python里是很常见的，比如下面的代码：

>>>for x, y in [(1, 1), (2, 4), (3, 9)]:
		print x, y
		
1 1
2 4
3 9

#列表生成式





























































